import logging
import json
import os
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, __version__ as telegram_version
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, ConversationHandler, MessageHandler, filters
from telegram.error import TelegramError
from flask import Flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask –¥–ª—è health-check
app = Flask(__name__)

@app.route('/')
def health_check():
    return "Bot is running", 200

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
print(f"Using python-telegram-bot version: {telegram_version}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ .env
from dotenv import load_dotenv
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env.")
    exit(1)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π)
DATA_FILE = "bot_data.json"
LOG_FILE = "action_log.json"

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ConversationHandler
SET_TITLE = 0

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            content = f.read().strip()
            if not content:
                logger.warning(f"–§–∞–π–ª {DATA_FILE} –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return [], [], set(), "", None
            data = json.loads(content)
            return (
                data.get("participants", []),
                data.get("queue", []),
                set(data.get("payments", [])),
                data.get("custom_title", ""),
                data.get("message_id", None)
            )
    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª {DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π")
        save_data([], [], set(), "", None)
        return [], [], set(), "", None
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ {DATA_FILE}: {e}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return [], [], set(), "", None
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {DATA_FILE}: {e}")
        return [], [], set(), "", None

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(participants, queue, payments, custom_title, message_id):
    try:
        with open(DATA_FILE, "w") as f:
            json.dump({
                "participants": participants,
                "queue": queue,
                "payments": list(payments),
                "custom_title": custom_title,
                "message_id": message_id
            }, f, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ {DATA_FILE}: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∞ –¥–µ–π—Å—Ç–≤–∏–π
def load_action_log():
    try:
        with open(LOG_FILE, "r") as f:
            content = f.read().strip()
            if not content:
                return []
            return json.loads(content)
    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª {LOG_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π")
        save_action_log([])
        return []
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ {LOG_FILE}: {e}")
        return []
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {LOG_FILE}: {e}")
        return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ –¥–µ–π—Å—Ç–≤–∏–π
def save_action_log(log):
    try:
        with open(LOG_FILE, "w") as f:
            json.dump(log, f, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞ –≤ {LOG_FILE}: {e}")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
def log_action(user_id, user_name, action):
    action_log = load_action_log()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    action_log.append({
        "timestamp": timestamp,
        "user_id": user_id,
        "user_name": user_name,
        "action": action
    })
    save_action_log(action_log)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
participants, queue, payments, custom_title, message_id = load_data()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(is_admin=False):
    keyboard = [
        [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="signup")],
        [InlineKeyboardButton("–ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º", callback_data="maybe")],
        [InlineKeyboardButton("–§–æ—Ä—Å-–º–∞–∂–æ—Ä", callback_data="force_majeure")],
        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª", callback_data="paid")]
    ]
    if is_admin:
        keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")])
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –º–µ–Ω—é
def create_menu_keyboard(is_admin=False):
    keyboard = [
        ["/start", "/menu"],
        ["/settitle", "/cleartitle", "/clearall"]
    ]
    if is_admin:
        keyboard.append(["/stats"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—á–µ—Ä–µ–¥–∏
def format_list():
    title = custom_title if custom_title else "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—á–µ—Ä–µ–¥—å"
    message = f"üìã <b>{title}</b>\n\n"
    message += "üë• –ó–∞–ø–∏—Å–∞–≤—à–∏–µ—Å—è:\n"
    if participants:
        for i, user in enumerate(participants, 1):
            status = "‚úÖ" if user["id"] in payments else ""
            message += f"{i}. {user['name']} {status}\n"
    else:
        message += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è.\n"

    message += "\nüïí –û—á–µ—Ä–µ–¥—å:\n"
    if queue:
        for i, user in enumerate(queue, 1):
            status = "‚úÖ" if user["id"] in payments else ""
            message += f"{i}. {user['name']} {status}\n"
    else:
        message += "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.\n"

    return message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def format_stats():
    action_log = load_action_log()
    if not action_log:
        return "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π</b>\n\n–ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."

    message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π</b>\n\n"
    for entry in action_log:
        message += f"[{entry['timestamp']}] {entry['user_name']} ({entry['user_id']}): {entry['action']}\n"
    return message

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        return member.status in ["administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global message_id
    is_admin_user = await is_admin(update, context)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.",
        reply_markup=create_menu_keyboard(is_admin_user)
    )
    sent_message = await update.message.reply_text(
        format_list(), parse_mode="HTML", reply_markup=create_keyboard(is_admin_user)
    )
    message_id = sent_message.message_id
    save_data(participants, queue, payments, custom_title, message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    is_admin_user = await is_admin(update, context)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=create_menu_keyboard(is_admin_user)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await is_admin(update, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã!")
        return
    await update.message.reply_text(format_stats(), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settitle (–Ω–∞—á–∞–ª–æ)
async def set_title_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await is_admin(update, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã!")
        return ConversationHandler.END

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:",
        reply_markup=ReplyKeyboardRemove()
    )
    return SET_TITLE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
async def set_title_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global custom_title, message_id
    is_admin_user = await is_admin(update, context)
    custom_title = update.message.text.strip()
    save_data(participants, queue, payments, custom_title, message_id)
    log_action(update.effective_user.id, update.effective_user.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏", f"–£—Å—Ç–∞–Ω–æ–≤–∏–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫: {custom_title}")
    await update.message.reply_text(
        f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {custom_title}",
        reply_markup=create_menu_keyboard(is_admin_user)
    )
    if message_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=message_id,
                text=format_list(),
                parse_mode="HTML",
                reply_markup=create_keyboard(is_admin_user)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            sent_message = await update.message.reply_text(
                format_list(), parse_mode="HTML", reply_markup=create_keyboard(is_admin_user)
            )
            message_id = sent_message.message_id
            save_data(participants, queue, payments, custom_title, message_id)
    else:
        sent_message = await update.message.reply_text(
            format_list(), parse_mode="HTML", reply_markup=create_keyboard(is_admin_user)
        )
        message_id = sent_message.message_id
        save_data(participants, queue, payments, custom_title, message_id)
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
async def set_title_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    is_admin_user = await is_admin(update, context)
    await update.message.reply_text(
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=create_menu_keyboard(is_admin_user)
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cleartitle
async def clear_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global custom_title, message_id
    is_admin_user = await is_admin(update, context)
    if not is_admin_user:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã!")
        return

    custom_title = ""
    save_data(participants, queue, payments, custom_title, message_id)
    log_action(update.effective_user.id, update.effective_user.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏", "–°–±—Ä–æ—Å–∏–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫")
    await update.message.reply_text(
        "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–±—Ä–æ—à–µ–Ω.",
        reply_markup=create_menu_keyboard(is_admin_user)
    )
    if message_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=message_id,
                text=format_list(),
                parse_mode="HTML",
                reply_markup=create_keyboard(is_admin_user)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            sent_message = await update.message.reply_text(
                format_list(), parse_mode="HTML", reply_markup=create_keyboard(is_admin_user)
            )
            message_id = sent_message.message_id
            save_data(participants, queue, payments, custom_title, message_id)
    else:
        sent_message = await update.message.reply_text(
            format_list(), parse_mode="HTML", reply_markup=create_keyboard(is_admin_user)
        )
        message_id = sent_message.message_id
        save_data(participants, queue, payments, custom_title, message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clearall
async def clear_all(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global participants, queue, payments, custom_title, message_id
    is_admin_user = await is_admin(update, context)
    if not is_admin_user:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã!")
        return

    participants = []
    queue = []
    payments = set()
    custom_title = ""
    save_data(participants, queue, payments, custom_title, message_id)
    log_action(update.effective_user.id, update.effective_user.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏", "–û—á–∏—Å—Ç–∏–ª –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")
    await update.message.reply_text(
        "–°–ø–∏—Å–æ–∫, –æ—á–µ—Ä–µ–¥—å –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.",
        reply_markup=create_menu_keyboard(is_admin_user)
    )

    if message_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=message_id,
                text=format_list(),
                parse_mode="HTML",
                reply_markup=create_keyboard(is_admin_user)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            sent_message = await update.message.reply_text(
                format_list(), parse_mode="HTML", reply_markup=create_keyboard(is_admin_user)
            )
            message_id = sent_message.message_id
            save_data(participants, queue, payments, custom_title, message_id)
    else:
        sent_message = await update.message.reply_text(
            format_list(), parse_mode="HTML", reply_markup=create_keyboard(is_admin_user)
        )
        message_id = sent_message.message_id
        save_data(participants, queue, payments, custom_title, message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global message_id
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user_name = query.from_user.full_name or query.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    user_data = {"id": user_id, "name": user_name}
    is_admin_user = await is_admin(update, context)
    notification = ""

    if query.data == "stats":
        if not is_admin_user:
            await query.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
            return
        await query.message.reply_text(format_stats(), parse_mode="HTML")
        return

    if query.data == "signup":
        if any(user["id"] == user_id for user in queue):
            queue[:] = [user for user in queue if user["id"] != user_id]
            if len(participants) < 12:
                participants.append(user_data)
                notification = f"{user_name}, –≤—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! –ü–æ–∑–∏—Ü–∏—è: {len(participants)}"
                log_action(user_id, user_name, "–ü–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏")
            else:
                queue.append(user_data)
                notification = f"{user_name}, –≤—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!"
                log_action(user_id, user_name, "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å")
        elif any(user["id"] == user_id for user in participants):
            notification = "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!"
            log_action(user_id, user_name, "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏")
        else:
            if len(participants) < 12:
                participants.append(user_data)
                notification = f"{user_name}, –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Å–ø–∏—Å–æ–∫! –ü–æ–∑–∏—Ü–∏—è: {len(participants)}"
                log_action(user_id, user_name, "–ó–∞–ø–∏—Å–∞–ª—Å—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏")
            else:
                queue.append(user_data)
                notification = f"{user_name}, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å! –ü–æ–∑–∏—Ü–∏—è: {len(queue)}"
                log_action(user_id, user_name, "–î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")

    elif query.data == "maybe":
        if any(user["id"] == user_id for user in participants):
            participants[:] = [user for user in participants if user["id"] != user_id]
            queue.append(user_data)
            notification = f"{user_name}, –≤—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å! –ü–æ–∑–∏—Ü–∏—è: {len(queue)}"
            log_action(user_id, user_name, "–ü–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å (–ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º)")
        elif any(user["id"] == user_id for user in queue):
            notification = "–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º!"
            log_action(user_id, user_name, "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å (–ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º)")
        else:
            queue.append(user_data)
            notification = f"{user_name}, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º! –ü–æ–∑–∏—Ü–∏—è: {len(queue)}"
            log_action(user_id, user_name, "–î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (–ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º)")

    elif query.data == "force_majeure":
        original_participants_len = len(participants)
        participants[:] = [user for user in participants if user["id"] != user_id]
        queue[:] = [user for user in queue if user["id"] != user_id]
        payments.discard(user_id)
        if original_participants_len > len(participants) or queue:
            notification = f"{user_name}, –≤—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞/–æ—á–µ—Ä–µ–¥–∏."
            log_action(user_id, user_name, "–£–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞/–æ—á–µ—Ä–µ–¥–∏ (—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä)")
        else:
            notification = "–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã."
            log_action(user_id, user_name, "–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä, –Ω–µ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω)")

    elif query.data == "paid":
        if any(user["id"] == user_id for user in participants + queue):
            payments.add(user_id)
            notification = f"{user_name}, –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–æ! ‚úÖ"
            log_action(user_id, user_name, "–û—Ç–º–µ—Ç–∏–ª –æ–ø–ª–∞—Ç—É")
        else:
            notification = "–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å!"
            log_action(user_id, user_name, "–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É (–Ω–µ –∑–∞–ø–∏—Å–∞–Ω)")

    save_data(participants, queue, payments, custom_title, message_id)

    message_text = f"{notification}\n\n{format_list()}"

    if message_id:
        try:
            await context.bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=message_id,
                text=message_text,
                parse_mode="HTML",
                reply_markup=create_keyboard(is_admin_user)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            sent_message = await query.message.reply_text(
                text=message_text,
                parse_mode="HTML",
                reply_markup=create_keyboard(is_admin_user)
            )
            message_id = sent_message.message_id
            save_data(participants, queue, payments, custom_title, message_id)
    else:
        sent_message = await query.message.reply_text(
            text=message_text,
            parse_mode="HTML",
            reply_markup=create_keyboard(is_admin_user)
        )
        message_id = sent_message.message_id
        save_data(participants, queue, payments, custom_title, message_id)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
def run_bot():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application = Application.builder().token(TOKEN).build()

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('settitle', set_title_start)],
            states={
                SET_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_title_save)],
            },
            fallbacks=[CommandHandler('cancel', set_title_cancel)]
        )

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("menu", menu))
        application.add_handler(CommandHandler("stats", stats))
        application.add_handler(CommandHandler("cleartitle", clear_title))
        application.add_handler(CommandHandler("clearall", clear_all))
        application.add_handler(conv_handler)
        application.add_handler(CallbackQueryHandler(button))

        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except TelegramError as te:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {te}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    import threading
    threading.Thread(target=run_bot).start()
    app.run(host='0.0.0.0', port=8080)
